\select@language {english}
\contentsline {chapter}{\numberline {1}Introduction}{3}
\contentsline {chapter}{\numberline {2}Preliminaries}{5}
\contentsline {section}{\numberline {2.1}Languages}{5}
\contentsline {section}{\numberline {2.2}Finite Automata}{5}
\contentsline {subsection}{\numberline {2.2.1}Nondeterministic Finite Automaton}{5}
\contentsline {subsection}{\numberline {2.2.2}Deterministic Finite Automaton}{6}
\contentsline {subsection}{\numberline {2.2.3}Run of a Finite Automaton}{6}
\contentsline {subsection}{\numberline {2.2.4}Language of a Finite Automaton}{7}
\contentsline {subsection}{\numberline {2.2.5}Complete DFA}{7}
\contentsline {subsection}{\numberline {2.2.6}Operations over Finite Automata}{7}
\contentsline {subsubsection}{Automata Union}{7}
\contentsline {subsubsection}{Automata Intersection}{7}
\contentsline {subsubsection}{Subset construction}{8}
\contentsline {section}{\numberline {2.3}Regular Languages}{9}
\contentsline {subsection}{\numberline {2.3.1}Closure Properties}{9}
\contentsline {chapter}{\numberline {3}Checking Inclusion over NFA}{10}
\contentsline {section}{\numberline {3.1}Checking Inclusion with Antichains and Simulation}{10}
\contentsline {subsection}{\numberline {3.1.1}Antichains Algorithm Description}{10}
\contentsline {section}{\numberline {3.2}Checking Inclusion with Bisimulation up to Congruence}{11}
\contentsline {subsection}{\numberline {3.2.1}Congruence Algorithm Description}{12}
\contentsline {subsection}{\numberline {3.2.2}Computation of Congruence Closure}{13}
\contentsline {subsubsection}{Optimization for Inclusion Checking}{14}
\contentsline {chapter}{\numberline {4}Existing Finite Automata Libraries and the VATA Library}{16}
\contentsline {section}{\numberline {4.1}Existing Finite Automata Libraries}{16}
\contentsline {subsection}{\numberline {4.1.1}dk.brics.automaton}{16}
\contentsline {subsubsection}{libfa}{16}
\contentsline {subsubsection}{Fare}{17}
\contentsline {subsection}{\numberline {4.1.2}The RWHT FSA toolkit}{17}
\contentsline {subsection}{\numberline {4.1.3}Implementation of the State-of-the-art Algorithms}{17}
\contentsline {section}{\numberline {4.2}VATA library}{17}
\contentsline {subsection}{\numberline {4.2.1}Design}{18}
\contentsline {subsubsection}{Explicit Encoding}{19}
\contentsline {subsubsection}{Semi-symbolic Encoding}{19}
\contentsline {subsubsection}{Operations}{20}
\contentsline {subsection}{\numberline {4.2.2}Extension for Finite Automata}{21}
\contentsline {chapter}{\numberline {5}Design}{22}
\contentsline {section}{\numberline {5.1}Data Structures for Explicit Encoding of Finite Automata}{22}
\contentsline {subsection}{\numberline {5.1.1}Analysis}{22}
\contentsline {subsection}{\numberline {5.1.2}Design of Data Structure for Transitions of NFA}{23}
\contentsline {section}{\numberline {5.2}Data Structure for Initial and Final States}{24}
\contentsline {section}{\numberline {5.3}Translation of the States and Symbols}{24}
\contentsline {section}{\numberline {5.4}Use of the Timbuk Format}{25}
\contentsline {section}{\numberline {5.5}Algorithms for Basic Operations}{26}
\contentsline {subsection}{\numberline {5.5.1}Union}{26}
\contentsline {subsubsection}{Union of NFAs with Disjoint Sets of States}{26}
\contentsline {subsection}{\numberline {5.5.2}Intersection}{26}
\contentsline {subsection}{\numberline {5.5.3}Reversal}{26}
\contentsline {subsection}{\numberline {5.5.4}Removing Unreachable States}{27}
\contentsline {subsection}{\numberline {5.5.5}Removing Useless States}{27}
\contentsline {subsection}{\numberline {5.5.6}Get Candidate}{28}
\contentsline {chapter}{\numberline {6}Implementation}{30}
\contentsline {section}{\numberline {6.1}Loading and Manipulation with Finite Automata in the Explicit Encoding}{30}
\contentsline {section}{\numberline {6.2}Used Modules of the VATA Library}{30}
\contentsline {subsubsection}{Parser and Serializer}{30}
\contentsline {subsubsection}{Simulation}{31}
\contentsline {subsubsection}{Utilities}{31}
\contentsline {section}{\numberline {6.3}Macrostate Cache}{31}
\contentsline {section}{\numberline {6.4}Implementation of the Antichains Algorithm}{32}
\contentsline {subsection}{\numberline {6.4.1}Ordering of an Antichain}{32}
\contentsline {subsection}{\numberline {6.4.2}Using Macrostate Cache}{33}
\contentsline {subsection}{\numberline {6.4.3}Ordered Antichain}{33}
\contentsline {section}{\numberline {6.5}Translation of an NFA into an LTS}{33}
\contentsline {section}{\numberline {6.6}Implementation of the Bisimulation up to Congruence Algorithm}{33}
\contentsline {subsection}{\numberline {6.6.1}Exploring Product NFA}{34}
\contentsline {subsection}{\numberline {6.6.2}Using Macrostate cache}{34}
\contentsline {subsection}{\numberline {6.6.3}Computing Congruence Closure for Checking Equivalence}{34}
\contentsline {subsection}{\numberline {6.6.4}Computing Congruence Closure for Inclusion Checking}{35}
\contentsline {chapter}{\numberline {7}Experimental Evaluation}{36}
\contentsline {section}{\numberline {7.1}Evaluation of Algorithm Based on Antichains}{36}
\contentsline {section}{\numberline {7.2}Evaluation of Algorithm Based on Bisimulation up to Congruence}{36}
\contentsline {subsection}{\numberline {7.2.1}Comparison with OCaml Implementation}{37}
\contentsline {subsection}{\numberline {7.2.2}Comparison with Tree Automata Implementation of VATA Library}{38}
\contentsline {section}{\numberline {7.3}Comparison of the Algorithms for NFA}{40}
\contentsline {chapter}{\numberline {8}Conclusion}{42}
\contentsline {chapter}{\numberline {A}Storage Medium}{45}
